#BlueJ class context
comment0.target=InputProcessor
comment0.text=\r\n\ Write\ a\ description\ of\ class\ InputProcessor\ here.\r\n\r\n\ @author\ Christian\ Bonin\r\n\ @version\ 5/6/2019\r\n
comment1.params=
comment1.target=InputProcessor()
comment1.text=\r\n\ Initializes\ coords\ to\ top\ left\ of\ the\ window\r\n\ Makes\ an\ instance\ of\ a\ graph\ to\ store\ in\ graph\ variable\r\n
comment10.params=arr\ display
comment10.target=void\ xorSets(java.lang.String[],\ Display)
comment11.params=display
comment11.target=java.util.BitSet\ andBits(Display)
comment12.params=display
comment12.target=java.util.BitSet\ orBits(Display)
comment13.params=display
comment13.target=java.util.BitSet\ xorBits(Display)
comment14.params=arr\ display
comment14.target=void\ setCombos(java.lang.String[],\ Display)
comment14.text=\r\n\ Gets\ every\ possible\ combination\ of\ a\ given\ number\ of\ elements\ from\ a\ given\ set\ and\ prints\ it\ to\ the\ screen\r\n
comment15.params=arr\ display
comment15.target=void\ setCombosToFile(java.lang.String[],\ Display)
comment15.text=\r\n\ Gets\ setcombos\ but\ outputs\ to\ file\ instead\ of\ printing\r\n
comment16.params=arr\ display
comment16.target=void\ setPermutes(java.lang.String[],\ Display)
comment16.text=\r\n\ Gets\ every\ possible\ permutation\ of\ a\ given\ number\ of\ elements\ of\ a\ given\ set\ and\ prints\ it\ to\ the\ screen.\r\n
comment17.params=arr\ display
comment17.target=void\ setPermutesToFile(java.lang.String[],\ Display)
comment17.text=\r\n\ Gets\ setpermutes\ but\ outputs\ to\ a\ file\ instead\ of\ printing\r\n
comment18.params=arr\ display
comment18.target=void\ powerSet(java.lang.String[],\ Display)
comment18.text=\r\n\ Will\ take\ a\ universal\ set\ and\ from\ it\ calculate\ all\ possible\ subsets\ of\ the\ given\ set\ and\ print\ them\ to\ the\ display\r\n
comment19.params=arr\ display
comment19.target=void\ powerSetToFile(java.lang.String[],\ Display)
comment19.text=\r\n\ Gets\ powerset\ but\ outputs\ to\ file\ instead\ of\ printing\r\n
comment2.params=input\ display
comment2.target=void\ processToDisplay(java.lang.String,\ Display)
comment2.text=\r\n\ arguments\ are\ split\ into\ an\ array\ by\ whitespace,\ first\ element\ is\ command\r\n\ following\ elements\ are\ arguments\r\n\ display\ is\ the\ class\ containing\ Jframe\ and\ Canvas\r\n
comment20.params=uni\ display
comment20.target=void\ bitsToSet(java.lang.String,\ Display)
comment20.text=\r\n\ Will\ take\ the\ result\ of\ a\ bit\ operation\ (and/or/xor\ etc)\ and\ convert\ it\ back\ to\ a\ set\ and\ print\ it\r\n
comment21.params=arr\ display
comment21.target=void\ mkSet(java.lang.String[],\ Display)
comment21.text=\r\n\ stores\ a\ given\ set\ of\ String\ values\ in\ an\ array\ and\ prints\ it\ to\ the\ screen,\ removing\ any\ duplicate\ elements\ of\ the\ set\ and\ sorting\ it\r\n
comment22.params=display
comment22.target=void\ spanningTree(Display)
comment22.text=\r\n\ based\ on\ Prim's\ algorithm\r\n\ makes\ a\ minimum\ spanning\ tree\ from\ the\ current\ graph\ and\ prints\ it\r\n\ should\ call\ setcolor\ with\ a\ new\ color\ before\ calling\ this\ or\ clear\ the\ screen\r\n
comment23.params=arr\ display
comment23.target=void\ mkVertex(java.lang.String[],\ Display)
comment24.params=arr\ display
comment24.target=void\ connect(java.lang.String[],\ Display)
comment25.params=vert1\ vert2\ display
comment25.target=void\ paintConnection(int,\ int,\ Display)
comment26.params=x\ y\ vN\ display
comment26.target=void\ paintVertex(int,\ int,\ int,\ Display)
comment27.params=g\ display
comment27.target=void\ paintGraph(Graph,\ Display)
comment28.params=display
comment28.target=void\ repaintGraph(Display)
comment29.params=arr\ display
comment29.target=boolean\ move(java.lang.String[],\ Display)
comment29.text=\r\n\ moves\ print\ position\ to\ given\ x\ and\ y\ values\r\n
comment3.params=display
comment3.target=void\ help(Display)
comment3.text=\r\n\ Prints\ a\ listing\ of\ the\ most\ useful\ commands\ to\ the\ screen\r\n
comment30.params=arr\ display
comment30.target=void\ permute(java.lang.String[],\ Display)
comment30.text=\r\n\ returns\ the\ number\ of\ possible\ permutations\ of\ n\ choosing\ r\ where\ n\ is\ the\ first\ argument\r\n\ arr[1]\ and\ r\ is\ the\ second\ argument\ arr[2]\r\n\ prints\ error\ to\ screen\ if\ there\ are\ incorrect\ or\ incorrect\ number\ of\ arguments\r\n
comment31.params=arr\ display
comment31.target=void\ visualTree(java.lang.String[],\ Display)
comment31.text=\r\n\ prints\ the\ start\ of\ a\ tree,\ a\ root\ node\ at\ the\ very\ least\ and\ optionally\ a\r\n\ lhs\ branch\ and\ rhs\ branch,\ more\ nodes\ can\ be\ appended\ via\ command\ line\ with\ appendTree\r\n
comment32.params=depth\ display
comment32.target=void\ bitTree(int,\ Display)
comment32.text=\r\n\ Constructs\ a\ tree\ of\ bits\ of\ a\ given\ depth\ and\ prints\ it\ to\ the\ display\r\n
comment33.params=arr\ display
comment33.target=boolean\ appendTree(java.lang.String[],\ Display)
comment33.text=\r\n\ allows\ for\ appending\ more\ nodes\ to\ tree\ at\ console\r\n
comment34.params=arr\ display
comment34.target=void\ combo(java.lang.String[],\ Display)
comment34.text=\r\n\ Calculates\ and\ returns\ number\ of\ combinations\ of\ n\ choosing\ r\r\n
comment35.params=arr\ display
comment35.target=void\ factorial(java.lang.String[],\ Display)
comment35.text=\r\n\ Calculates\ and\ returns\ the\ factorial\ of\ a\ given\ n\r\n
comment36.params=s\ display
comment36.target=boolean\ setColor(java.lang.String,\ Display)
comment36.text=\r\n\ sets\ color\ to\ be\ used\ by\ graphics\ object\ in\ display\ class,\ any\ method\ called\ after\ will\ be\ \r\n\ done\ in\ the\ newly\ set\ color\r\n
comment37.params=s\ display
comment37.target=void\ bp(java.lang.String,\ Display)
comment37.text=\r\n\ call\ paint\ a\ few\ times\ to\ be\ sure\ to\ get\ past\ the\ buffer\r\n\ think\ of\ it\ like\ adding\ a\ couple\ coats\ of\ paint\ for\ that\ nice\ finish\r\n
comment38.params=t\ display\ depth
comment38.target=void\ bp(Tree,\ Display,\ int)
comment38.text=\r\n\ recursively\ prints\ a\ tree\ structure\r\n\ horizontal\ spacing\ is\ divided\ by\ depth\ to\ keep\ nodes\ from\ crowding\ in\ on\ each\ other\r\n\ (starts\ out\ wide\ at\ the\ top,\ tree\ gets\ tighter\ as\ it\ descends)\r\n
comment4.params=arr\ display
comment4.target=void\ bits(java.lang.String[],\ Display)
comment4.text=\r\n\ given\ a\ universal\ set\ and\ subset,\ gets\ its\ bitset\ representation\ and\ stores\ it\ in\ the\ given\ bitset\ a\ or\ b\r\n\ and\ prints\ it\ to\ the\ screen\r\n
comment5.params=arr\ display
comment5.target=void\ binomExp(java.lang.String[],\ Display)
comment5.text=\r\n\ Expands\ a\ binomial\ expression.\ Will\ first\ print\ in\ such\ a\ way\ as\ to\ show\ the\ binomial\ coeff\ separated\ from\ simplified\ output\ and\ then\ prints\r\n\ again\ with\ simplified\ output.\r\n
comment6.params=arr\ display
comment6.target=void\ mergeSets(java.lang.String[],\ Display)
comment6.text=\r\n\ merges\ two\ sets\ into\ a\ universal\ set\r\n
comment7.params=arr\ display
comment7.target=void\ getBits(java.lang.String[],\ Display)
comment7.text=\r\n\ Makes\ a\ universal\ set\ from\ the\ given\ two\ subsets\ and\ gets\ their\ bitset\ respresentations,\ prints\ them\ to\ the\ screen\r\n
comment8.params=arr\ display
comment8.target=void\ andSets(java.lang.String[],\ Display)
comment9.params=arr\ display
comment9.target=void\ orSets(java.lang.String[],\ Display)
numComments=39
